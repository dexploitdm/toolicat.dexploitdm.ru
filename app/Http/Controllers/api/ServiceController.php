<?php

namespace App\Http\Controllers\api;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Service;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\File;

class ServiceController extends Controller
{
    public function allServices() {
        $services = Service::all();
        return response()->json($services);
    }
    public function createService(Request $request) {
        if($request->logo){
            $extensionLogo = $request->logo->getClientOriginalExtension();
            $timestampNameLogo = microtime(true) . '.' . $extensionLogo;
            $request->logo->move(public_path('uploads/services'), $timestampNameLogo);
        }


        $data = new Service();
        $data->title = $request->get('title');
        $data->content = $request->get('content');
        $data->desc = $request->get('desc');
        $data->name = $request->get('name');
        $data->surname = $request->get('surname');
        $data->email = $request->get('email');
        $data->testPeriodDate = $request->get('testPeriodDate');
        $data->testPeriodLink = $request->get('testPeriodLink');
        $data->priceStart = $request->get('priceStart');
        $data->priceEnd = $request->get('priceEnd');
        $data->languages = $request->get('languages');
        $data->business = $request->get('business');
        $data->businessFor = $request->get('businessFor');
        //$data->features = $request->get('features');
        $data->features = json_decode($request->get('features'));
        //json_encode($request->features);

        if($request->logo){
            $data->logo = $timestampNameLogo;
        }
        $data->category_id = $request->get('category_id');
        $data->assessmentUse = $request->get('assessmentUse');
        $data->assessmentSupport = $request->get('assessmentSupport');
        $data->linkSite = $request->get('linkSite');
        $data->linkCases = $request->get('linkCases');
        $data->linkInstructions = $request->get('linkInstructions');
        $data->linkVideo = $request->get('linkVideo');
        $data->linkAPI = $request->get('linkAPI');
        $data->methodsPay = $request->get('methodsPay');
        $data->systemInstall = $request->get('systemInstall');
        $data->professions = $request->get('professions');
        $data->socials = $request->get('socials');
        $data->isSupport = $request->get('isSupport');
        $data->linkCases = $request->get('linkCases');
        $data->linkAPI = $request->get('linkAPI');
        $data->linkInstructions = $request->get('linkInstructions');
        $data->save();
        return $request;
    }
    public function editService($id)
    {
        $service = Service::find($id);
        return response()->json($service);
    }
    public function remove($id) {
        Service::find($id)->remove();
    }
    public function updateService($id, Request $request)
    {
        $service = Service::find($id);
        $timestampNameLogo = '';
        if($request->logo !== $service->logo){
            if($service->logo){
                $service->removeImageLogo();
            }
            $extensionLogo = $request->logo->getClientOriginalExtension();
            $timestampNameLogo = microtime(true) . '.' . $extensionLogo;
            $request->logo->move(public_path('uploads/services'), $timestampNameLogo);
        }

        $service->update($request->all());
        if($timestampNameLogo){
            $service->logo = $timestampNameLogo;
        }


        $service->save();
        return response()->json('Сервис обновлен' . $request->systemInstall);
    }

}
